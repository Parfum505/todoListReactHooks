{"version":3,"sources":["components/ToDoForm.js","components/ListItem.js","components/List.js","App.js","serviceWorker.js","index.js"],"names":["ToDoForm","addTask","lastId","useState","id","item","completed","todo","setTodo","isValidatedForm","setIsValidatedForm","className","data-testid","onSubmit","e","preventDefault","trim","newId","action","noValidate","type","name","value","placeholder","required","onChange","target","React","memo","task","setCompleted","deleteTask","checked","htmlFor","readOnly","onClick","List","list","map","key","App","todos","setTodos","useEffect","savedTodos","JSON","parse","localStorage","getItem","setItem","stringify","newList","filter","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.fb8e7e03.chunk.js","sourcesContent":["import React, { useState } from \"react\";\r\n\r\nfunction ToDoForm({ addTask, lastId }) {\r\n  const [todo, setTodo] = useState({\r\n    id: 0,\r\n    item: \"\",\r\n    completed: false,\r\n  });\r\n  const [isValidatedForm, setIsValidatedForm] = useState(\"\");\r\n  function inputChange(e) {\r\n    setTodo({ ...todo, item: e.target.value, id: lastId });\r\n  }\r\n  function handleSubmitForm(e) {\r\n    e.preventDefault();\r\n    if (!todo.item.trim()) {\r\n      setIsValidatedForm(\"was-validated\");\r\n    } else {\r\n      const newId = todo.id + 1;\r\n      addTask(newId, todo);\r\n      setTodo({ ...todo, item: \"\" });\r\n      setIsValidatedForm(\"\");\r\n    }\r\n  }\r\n  return (\r\n    <div className=\"row justify-content-center\">\r\n      <form\r\n        data-testid=\"form\"\r\n        className={`col-11 col-sm-10 col-md-7 col-lg-5 mb-5 needs-validation ${isValidatedForm}`}\r\n        onSubmit={handleSubmitForm}\r\n        action=\"\"\r\n        noValidate\r\n      >\r\n        <div className=\"input-group input-group-lg\">\r\n          <input\r\n            type=\"text\"\r\n            name=\"newTask\"\r\n            value={todo.item}\r\n            className=\"form-control\"\r\n            placeholder=\"Enter text ...\"\r\n            id=\"todo\"\r\n            required\r\n            onChange={inputChange}\r\n          />\r\n          <div className=\"input-group-append\">\r\n            <button id=\"submit_btn\" type=\"submit\" className=\"btn btn-primary\">\r\n              Add\r\n            </button>\r\n          </div>\r\n          {isValidatedForm ? (\r\n            <div className=\"invalid-feedback\">Please fill out this field.</div>\r\n          ) : null}\r\n        </div>\r\n      </form>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default ToDoForm;\r\n","import React from \"react\";\r\n\r\nconst ListItem = ({ task, setCompleted, deleteTask }) => (\r\n  <li className=\"input-group mb-3\" id={task.id}>\r\n    <div className=\"custom-control custom-checkbox\">\r\n      <input\r\n        type=\"checkbox\"\r\n        id={`customCheck_${task.id}`}\r\n        className=\"custom-control-input\"\r\n        checked={task.completed}\r\n        onChange={() => setCompleted(task.id)}\r\n      />\r\n      <label\r\n        className=\"custom-control-label\"\r\n        htmlFor={`customCheck_${task.id}`}\r\n      >\r\n        &nbsp;\r\n      </label>\r\n    </div>\r\n    <input\r\n      type=\"text\"\r\n      className={`form-control ${task.completed ? \"completed\" : \"\"}`}\r\n      value={task.item}\r\n      readOnly\r\n    />\r\n    <div className=\"input-group-append\">\r\n      <button\r\n        className=\"btn btn-danger input-group-text\"\r\n        onClick={() => deleteTask(task.id)}\r\n      >\r\n        X\r\n      </button>\r\n    </div>\r\n  </li>\r\n);\r\n\r\nexport default React.memo(ListItem);\r\n","import React from \"react\";\r\nimport ListItem from \"./ListItem\";\r\n\r\nconst List = ({ list, setCompleted, deleteTask }) => {\r\n  return (\r\n    <div className=\"row justify-content-center\">\r\n      <ul\r\n        id=\"todoList\"\r\n        className=\"list-group col-11 col-sm-10 col-md-7 col-lg-5\"\r\n      >\r\n        {list &&\r\n          list.map((task) => (\r\n            <ListItem\r\n              key={task.id}\r\n              task={task}\r\n              deleteTask={deleteTask}\r\n              setCompleted={setCompleted}\r\n            />\r\n          ))}\r\n      </ul>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default List;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\nimport \"./App.css\";\r\nimport ToDoForm from \"./components/ToDoForm\";\r\nimport List from \"./components/List\";\r\n\r\nfunction App() {\r\n  const [todos, setTodos] = useState({ lastId: 1, list: [] });\r\n\r\n  useEffect(() => {\r\n    const savedTodos = JSON.parse(localStorage.getItem(\"todoList\"));\r\n    if (savedTodos && savedTodos.list) {\r\n      setTodos(savedTodos);\r\n    }\r\n  }, []);\r\n  useEffect(() => {\r\n    localStorage.setItem(\"todoList\", JSON.stringify(todos));\r\n  }, [todos]);\r\n\r\n  const addTask = (newId, todo) => {\r\n    setTodos({ lastId: newId, list: [todo, ...todos.list] });\r\n  };\r\n  const deleteTask = (id) => {\r\n    const newList = todos.list.filter((task) => {\r\n      return task.id !== id;\r\n    });\r\n    setTodos({ ...todos, list: [...newList] });\r\n  };\r\n  const setCompleted = (id) => {\r\n    const newList = todos.list.map((item) => {\r\n      if (item.id === id) item.completed = !item.completed;\r\n      return item;\r\n    });\r\n    setTodos({ ...todos, list: [...newList] });\r\n  };\r\n  return (\r\n    <div className=\"App\">\r\n      <div className=\"container mt-5\">\r\n        <h1 className=\"h2 mb-5 text-center\">ToDo List with React Hooks</h1>\r\n        <ToDoForm lastId={todos.lastId} addTask={addTask} />\r\n        <List\r\n          list={todos.list}\r\n          deleteTask={deleteTask}\r\n          setCompleted={setCompleted}\r\n        />\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}