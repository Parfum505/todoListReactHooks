{"version":3,"sources":["components/ToDoForm.js","components/List.js","App.js","serviceWorker.js","index.js"],"names":["ToDoForm","props","useState","id","item","completed","todo","setTodo","className","onSubmit","e","preventDefault","form","document","querySelector","elements","value","trim","newId","addTask","classList","remove","add","action","noValidate","type","name","placeholder","required","onChange","target","lastId","List","list","map","task","key","checked","setCompleted","htmlFor","readOnly","onClick","deletedTask","App","todos","setTodos","useEffect","savedTodos","JSON","parse","localStorage","getItem","setItem","stringify","newList","filter","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"6PA8CeA,MA5Cf,SAAkBC,GAAQ,IAAD,EACGC,mBAAS,CAC7BC,GAAI,EACJC,KAAM,GACNC,WAAW,IAJM,mBACdC,EADc,KACRC,EADQ,KAsBrB,OACI,yBAAKC,UAAU,8BACX,0BAAMA,UAAU,4DAA4DC,SAfpF,SAA2BC,GACvBA,EAAEC,iBACF,IAAMC,EAAOC,SAASC,cAAc,qBAEpC,GADgBF,EAAKG,SAAL,QAAyBC,MAC5BC,OAEN,CACH,IAAMC,EAAQZ,EAAKH,GAAK,EACxBF,EAAMkB,QAAQD,EAAOZ,GACrBC,EAAQ,eAAID,EAAL,CAAWF,KAAM,MACxBQ,EAAKQ,UAAUC,OAAO,sBALtBT,EAAKQ,UAAUE,IAAI,kBAUqFC,OAAO,GAAGC,YAAU,GACxH,yBAAKhB,UAAU,8BACX,2BAAOiB,KAAK,OACLC,KAAK,UACLV,MAAOV,EAAKF,KACZI,UAAU,eACVmB,YAAY,iBACZxB,GAAG,OAAOyB,UAAQ,EAClBC,SA1BvB,SAAsBnB,GAClBH,EAAQ,eAAID,EAAL,CAAWF,KAAMM,EAAEoB,OAAOd,MAAOb,GAAIF,EAAM8B,aA2BtC,yBAAKvB,UAAU,sBACX,4BAAQL,GAAG,aAAasB,KAAK,SAASjB,UAAU,mBAAhD,QAEJ,yBAAKA,UAAU,oBAAf,mCCXLwB,MA1Bf,SAAc/B,GACV,IAAMgC,EAAOhC,EAAMgC,KAAKC,KAAI,SAACC,GAC1B,OACI,wBAAIC,IAAKD,EAAKhC,GAAIK,UAAU,mBAAmBL,GAAIgC,EAAKhC,IACpD,yBAAKK,UAAU,kCACX,2BAAOiB,KAAK,WAAWtB,GAAE,sBAAiBgC,EAAKhC,IACxCK,UAAU,uBACV6B,QAASF,EAAK9B,UACdwB,SAAU,kBAAI5B,EAAMqC,aAAaH,EAAKhC,OAC7C,2BAAOK,UAAU,uBAAuB+B,QAAO,sBAAiBJ,EAAKhC,KAArE,SAEJ,2BAAOsB,KAAK,OAAOjB,UAAU,eAAeQ,MAAOmB,EAAK/B,KAAMoC,UAAQ,IACtE,yBAAKhC,UAAU,sBACX,4BAAQA,UAAU,kCAAkCiC,QAAS,kBAAIxC,EAAMyC,YAAYP,EAAKhC,MAAxF,UAMf,OACI,yBAAKK,UAAU,8BACX,wBAAIL,GAAG,WAAWK,UAAU,iDAAiDyB,KCyB1EU,MA1Cf,WAAgB,IAAD,EACezC,mBAAS,CAAC6B,OAAQ,EAAGE,KAAM,KAD1C,mBACJW,EADI,KACGC,EADH,KA4Bb,OAzBEC,qBAAU,WACN,IAAMC,EAAaC,KAAKC,MAAMC,aAAaC,QAAQ,aAC/CJ,GAAcA,EAAWd,MACzBY,EAASE,KAEd,IACHD,qBAAU,WACNI,aAAaE,QAAQ,WAAYJ,KAAKK,UAAUT,MACjD,CAACA,IAkBJ,yBAAKpC,UAAU,OACX,yBAAKA,UAAU,kBACX,wBAAIA,UAAU,uBAAd,8BACA,kBAAC,EAAD,CAAUuB,OAAQa,EAAMb,OAAQZ,QApBxC,SAAkBD,EAAOZ,GACrBuC,EAAS,CAACd,OAAQb,EAAOe,KAAK,CAAE3B,GAAH,mBAAYsC,EAAMX,YAoB3C,kBAAC,EAAD,CAAMA,KAAMW,EAAMX,KACdS,YAnBZ,SAAsBvC,GAClB,IAAMmD,EAAUV,EAAMX,KAAKsB,QAAO,SAAApB,GAC9B,OAAOA,EAAKhC,KAAOA,KAEvB0C,EAAS,eAAID,EAAL,CAAYX,KAAK,YAAKqB,OAgBtBhB,aAdZ,SAAuBnC,GACnB,IAAMmD,EAAUV,EAAMX,KAAKC,KAAK,SAAC9B,GAE7B,OADIA,EAAKD,KAAOA,IAAKC,EAAKC,WAAaD,EAAKC,WACrCD,KAEXyC,EAAS,eAAID,EAAL,CAAYX,KAAK,YAAKqB,YCpBlBE,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFlD,SAASmD,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.c177be3c.chunk.js","sourcesContent":["import React, { useState } from \"react\";\r\n\r\nfunction ToDoForm(props) {\r\n    const [todo, setTodo] = useState({\r\n        id: 0,\r\n        item: '',\r\n        completed: false\r\n    });\r\n    function inputChange (e) {\r\n        setTodo({...todo, item: e.target.value, id: props.lastId});\r\n    }\r\n    function handleSubmitForm (e) {\r\n        e.preventDefault();\r\n        const form = document.querySelector('.needs-validation'),\r\n              newTask = form.elements[\"newTask\"].value;\r\n        if (!newTask.trim()){\r\n            form.classList.add('was-validated');\r\n        } else {\r\n            const newId = todo.id + 1;\r\n            props.addTask(newId, todo);\r\n            setTodo({...todo, item: ''});\r\n            form.classList.remove('was-validated');\r\n        }\r\n    }\r\n    return (\r\n        <div className=\"row justify-content-center\">\r\n            <form className=\" col-11 col-sm-10 col-md-7 col-lg-5 mb-5 needs-validation\" onSubmit={handleSubmitForm} action=\"\" noValidate>\r\n                <div className=\"input-group input-group-lg\">\r\n                    <input type=\"text\"\r\n                           name=\"newTask\"\r\n                           value={todo.item}\r\n                           className=\"form-control\"\r\n                           placeholder=\"Enter text ...\"\r\n                           id=\"todo\" required\r\n                           onChange={inputChange}\r\n                    />\r\n                    <div className=\"input-group-append\">\r\n                        <button id=\"submit_btn\" type=\"submit\" className=\"btn btn-primary\">Add</button>\r\n                    </div>\r\n                    <div className=\"invalid-feedback\">Please fill out this field.</div>\r\n                </div>\r\n            </form>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ToDoForm;","import React from \"react\";\r\n\r\nfunction List(props) {\r\n    const list = props.list.map((task) => {\r\n       return (\r\n           <li key={task.id} className=\"input-group mb-3\" id={task.id}>\r\n               <div className=\"custom-control custom-checkbox\">\r\n                   <input type=\"checkbox\" id={`customCheck_${task.id}`}\r\n                          className=\"custom-control-input\"\r\n                          checked={task.completed}\r\n                          onChange={()=>props.setCompleted(task.id)}/>\r\n                   <label className=\"custom-control-label\" htmlFor={`customCheck_${task.id}`}>&nbsp;</label>\r\n               </div>\r\n               <input type=\"text\" className=\"form-control\" value={task.item} readOnly />\r\n               <div className=\"input-group-append\">\r\n                   <button className=\"btn btn-danger input-group-text\" onClick={()=>props.deletedTask(task.id)}>X</button>\r\n               </div>\r\n           </li>\r\n       );\r\n    });\r\n\r\n    return (\r\n        <div className=\"row justify-content-center\">\r\n            <ul id=\"todoList\" className=\"list-group col-11 col-sm-10 col-md-7 col-lg-5\">{list}</ul>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default List;","import React, { useState, useEffect } from 'react';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport './App.css';\r\nimport ToDoForm from \"./components/ToDoForm\";\r\nimport List from \"./components/List\";\r\n\r\nfunction App() {\r\n    const [todos, setTodos] = useState({lastId: 1, list: []});\r\n\r\n    useEffect(()=> {\r\n        const savedTodos = JSON.parse(localStorage.getItem(\"todoList\"));\r\n        if (savedTodos && savedTodos.list) {\r\n            setTodos(savedTodos);\r\n        }\r\n    }, []);\r\n    useEffect(()=> {\r\n        localStorage.setItem(\"todoList\", JSON.stringify(todos));\r\n    }, [todos]);\r\n    function addTask (newId, todo) {\r\n        setTodos({lastId: newId, list: [todo, ...todos.list]})\r\n    }\r\n    function deletedTask (id) {\r\n        const newList = todos.list.filter(task => {\r\n            return task.id !== id;\r\n        });\r\n        setTodos({...todos, list: [...newList]});\r\n    }\r\n    function setCompleted (id) {\r\n        const newList = todos.list.map( (item) => {\r\n            if (item.id === id)  item.completed = !item.completed;\r\n            return item;\r\n        });\r\n        setTodos({...todos, list: [...newList]});\r\n    }\r\n  return (\r\n    <div className=\"App\">\r\n        <div className=\"container mt-5\">\r\n            <h1 className=\"h2 mb-5 text-center\">ToDo List with React Hooks</h1>\r\n            <ToDoForm lastId={todos.lastId} addTask={addTask}/>\r\n            <List list={todos.list}\r\n                deletedTask={deletedTask}\r\n                setCompleted={setCompleted}\r\n            />\r\n        </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}